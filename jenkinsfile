pipeline {
    agent any
    
    environment {
        // Définition des variables d'environnement
        DOCKER_HUB_CREDS = credentials('dockerhub-credentials')
        DOCKER_IMAGE = 'your-dockerhub-username/jenkins-devops-app'
        DOCKER_TAG = "${env.BRANCH_NAME}-${env.BUILD_NUMBER}"
        KUBECONFIG = credentials('kubeconfig-credentials')
        GIT_REPO_URL = 'https://github.com/your-username/Jenkins_devops_exams.git'
    }
    
    stages {
        stage('Checkout') {
            steps {
                // Récupération du code source
                checkout scm
                echo "Branche: ${env.BRANCH_NAME}"
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    // Construction de l'image Docker
                    sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                    
                    // Tagging de l'image pour les différents environnements
                    if (env.BRANCH_NAME == 'develop') {
                        sh "docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:dev-latest"
                    } else if (env.BRANCH_NAME == 'qa') {
                        sh "docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:qa-latest"
                    } else if (env.BRANCH_NAME == 'staging') {
                        sh "docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:staging-latest"
                    } else if (env.BRANCH_NAME == 'master') {
                        sh "docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:prod-latest"
                        sh "docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest"
                    }
                }
            }
        }
        
        stage('Push to DockerHub') {
            steps {
                script {
                    // Connexion à DockerHub
                    sh "echo ${DOCKER_HUB_CREDS_PSW} | docker login -u ${DOCKER_HUB_CREDS_USR} --password-stdin"
                    
                    // Push de l'image avec le tag spécifique
                    sh "docker push ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    
                    // Push des tags d'environnement si applicable
                    if (env.BRANCH_NAME == 'develop') {
                        sh "docker push ${DOCKER_IMAGE}:dev-latest"
                    } else if (env.BRANCH_NAME == 'qa') {
                        sh "docker push ${DOCKER_IMAGE}:qa-latest"
                    } else if (env.BRANCH_NAME == 'staging') {
                        sh "docker push ${DOCKER_IMAGE}:staging-latest"
                    } else if (env.BRANCH_NAME == 'master') {
                        sh "docker push ${DOCKER_IMAGE}:prod-latest"
                        sh "docker push ${DOCKER_IMAGE}:latest"
                    }
                }
            }
        }
        
        stage('Deploy to Dev') {
            when {
                branch 'develop'
            }
            steps {
                script {
                    // Déploiement sur l'environnement de développement
                    echo "Déploiement dans l'environnement DEV"
                    sh """
                        export KUBECONFIG=${KUBECONFIG}
                        helm upgrade --install app-dev ./helm-chart \
                            --namespace dev \
                            --set image.repository=${DOCKER_IMAGE} \
                            --set image.tag=dev-latest \
                            --set environment=dev
                    """
                }
            }
        }
        
        stage('Deploy to QA') {
            when {
                branch 'qa'
            }
            steps {
                script {
                    // Déploiement sur l'environnement QA
                    echo "Déploiement dans l'environnement QA"
                    sh """
                        export KUBECONFIG=${KUBECONFIG}
                        helm upgrade --install app-qa ./helm-chart \
                            --namespace qa \
                            --set image.repository=${DOCKER_IMAGE} \
                            --set image.tag=qa-latest \
                            --set environment=qa
                    """
                }
            }
        }
        
        stage('Deploy to Staging') {
            when {
                branch 'staging'
            }
            steps {
                script {
                    // Déploiement sur l'environnement de Staging
                    echo "Déploiement dans l'environnement STAGING"
                    sh """
                        export KUBECONFIG=${KUBECONFIG}
                        helm upgrade --install app-staging ./helm-chart \
                            --namespace staging \
                            --set image.repository=${DOCKER_IMAGE} \
                            --set image.tag=staging-latest \
                            --set environment=staging
                    """
                }
            }
        }
        
        stage('Approve Production Deployment') {
            when {
                branch 'master'
            }
            steps {
                // Demande d'approbation manuelle pour le déploiement en production
                input message: "Déployer en PRODUCTION?", ok: "Oui, déployer"
            }
        }
        
        stage('Deploy to Production') {
            when {
                branch 'master'
            }
            steps {
                script {
                    // Déploiement manuel sur l'environnement de production
                    echo "Déploiement manuel dans l'environnement PRODUCTION"
                    sh """
                        export KUBECONFIG=${KUBECONFIG}
                        helm upgrade --install app-prod ./helm-chart \
                            --namespace prod \
                            --set image.repository=${DOCKER_IMAGE} \
                            --set image.tag=prod-latest \
                            --set environment=prod
                    """
                }
            }
        }
    }
    
    post {
        always {
            // Nettoyage des images Docker locales
            sh "docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG} || true"
            
            // Déconnexion de DockerHub
            sh "docker logout"
        }
        success {
            echo 'Pipeline exécuté avec succès!'
        }
        failure {
            echo 'Le pipeline a échoué!'
        }
    }
}
